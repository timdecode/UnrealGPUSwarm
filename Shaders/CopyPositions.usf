#include "/Engine/Private/Common.ush"

int numParticles; 
float particleScale; 

RWStructuredBuffer<float4> positions;
RWStructuredBuffer<float4> positions_other;

RWStructuredBuffer<float4> directions;
RWStructuredBuffer<float4> transforms_other;

float4x4 look_at_matrix(float3 at, float3 eye, float3 up)
{
    float3 zaxis = normalize(at - eye);
    float3 xaxis = normalize(cross(up, zaxis));
    float3 yaxis = cross(zaxis, xaxis);

    float4x4 mat = float4x4(
        xaxis.x, yaxis.x, zaxis.x, 0,
        xaxis.y, yaxis.y, zaxis.y, 0,
        xaxis.z, yaxis.z, zaxis.z, 0,
        0, 0, 0, 1.0f
    ) * particleScale;
    
    mat[3][3] = 1.0f;
    
    return mat;
}

[numthreads(256, 1, 1)]
void copyPositions(uint3 ThreadId : SV_DispatchThreadID)
{
    int index = ThreadId.x;

    if (index >= numParticles)
        return;    
   
    positions_other[index] = positions[index];
    
    float4x4 mat = look_at_matrix(
        positions[index].xyz,
        positions[index].xyz - normalize(directions[index].xyz),
        float3(0.0f, 0.0f, 1.0f)
    );

    transforms_other[index * 3 + 0][0] = mat[0][0];
    transforms_other[index * 3 + 0][1] = mat[1][0];
    transforms_other[index * 3 + 0][2] = mat[2][0];
    transforms_other[index * 3 + 0][3] = mat[3][0];

    transforms_other[index * 3 + 1][0] = mat[0][1];
    transforms_other[index * 3 + 1][1] = mat[1][1];
    transforms_other[index * 3 + 1][2] = mat[2][1];
    transforms_other[index * 3 + 1][3] = mat[3][1];

    transforms_other[index * 3 + 2][0] = mat[0][2];
    transforms_other[index * 3 + 2][1] = mat[1][2];
    transforms_other[index * 3 + 2][2] = mat[2][2];
    transforms_other[index * 3 + 2][3] = mat[3][2];
}